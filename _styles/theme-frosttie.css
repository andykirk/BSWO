/*
    NeoCLEAR Theme
    Note this theme file needs to be loaded *in addition* to the base 'style' file.
*/
/* --| START THEME |----------------------------------------------------------------------------- */
/*
    Many (soon all?) of these patterns are themeable, so they are configured and imported here
    (separately) so that they can be imported into other theme files without resulting in
    re-declared base-styles. E.g. bands defines a set of size classes, these only need to appear in
    the stylesheet once. The file that includes *this* file should set `$theme-only: true` to toggle
    this behaviour.
*/
/*

*/
/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Settings

    Fall-Back is designed for use with the basic
    [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)

    This determines a browser support base of:

    IE 9+, FF 8+, Opera 12, [Chrome 29+, Android ~4.4+]
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+


    Any double-classing (e.g. `.class.class`) is deliberate and intended to increase specifity.
    This allows any applicable Start-CSS declarations to be overidden.
    E.g. `.{pattern} .{pattern}__child` would `a[href]`, but just `.{pattern}` wouldn't, so we use
    `.{pattern}.{pattren}`

    https://coolors.co/50514f-f25f5c-ffe066-247ba0-70c1b3

|-------------------------------------------------------------------------------------------------*/
/* --| FUNCTIONS AND MIXINS |-------------------------------------------------------------------- */
/*
    Global sizes
*/
/* --| Component Patterns |---------------------------------------------------------------------- */
/*

*/
/*$brochure-spacing-unit: $f__base-rem-space-unit;
$brochure--border-or-outline: false;
@import "component-patterns/_brochure.scss";*/
/*
    The `height: 100%;` in the `.card` class below allows the card to fill it's container (if inside,
    say, a list-grid). However, it doesn't work in Safari OSX/iOS.
    Applying a `card-wrap` class to a list item to make those items flex-containers seems to work
    OK, but perhaps this would be better abstracted as a `fill-height` class or something?

    Note IE10-11 flexbox for card, main and body causes problems when in other flex contexts.
    For IE10 I'm just leaving off the -ms prefixes - it's still usable without flex.
*/
/*
$card-cta--border-width: 1px !default;
$card-cta--border-style: solid !default;
$card-cta--border-radius: 3px !default;
*/
/*
$card--link-color: false !default;
$card--link-color--alt: false !default;
$card--link-has-border-bottom: false !default;
$card--link-border-bottom: false !default;
$card--link-border-bottom--alt: false !default;

// If we've specified a link color for the card, but not an alt state (e.g. hover)
// then generate one
@if $card--link-color != false and $card--link-color--alt == false {
    $card--link-color--alt: darken($card--link-color, 10%) !default;;
}

// If we've specified a link color for the card, and we want bottom borders, generate the borders:
@if $card--link-color != false and $card--link-has-border-bottom != false {
    $card--link-border-bottom: 1px solid lighten($card--link-color, 20%) !default;
    $card--link-border-bottom--alt: 2px solid lighten($card--link-color--alt, 30%) !default;
}
*/
/*
$card-button--text-color: #fff !default;
$card-button--background-color: $card--base-color !default;
$card-button--background-color-alt: lighten($card--base-color, 20%) !default;
$card-button--border-color: darken($card--base-color, 20%) !default;
*/
/*
    .c-card-wrap .c-card {

        //width: 100%;
    }
*/
_:-ms-lang(x), .c-card.c-card {
  margin-right: -2px\9;
  margin-left: -2px\9;
}

/*@include card-theme("card", (
    background-color: darken($f__base-ui-color, 20%),
    text-color: #fff
    )
);*/
/*
*/
/*
    The `height: 100%;` in the `.event` class below allows the event to fill it's container (if inside,
    say, a list-grid). However, it doesn't work in Safari OSX/iOS.
    Applying a `event-wrap` class to a list item to make those items flex-containers seems to work
    OK, but perhaps this would be better abstracted as a `fill-height` class or something?
*/
/*
$event-cta--border-width: 1px !default;
$event-cta--border-style: solid !default;
$event-cta--border-radius: 3px !default;
*/
/*
$event--link-color: false !default;
$event--link-color--alt: false !default;
$event--link-has-border-bottom: false !default;
$event--link-border-bottom: false !default;
$event--link-border-bottom--alt: false !default;

// If we've specified a link color for the event, but not an alt state (e.g. hover)
// then generate one
@if $event--link-color != false and $event--link-color--alt == false {
    $event--link-color--alt: darken($event--link-color, 10%) !default;;
}

// If we've specified a link color for the event, and we want bottom borders, generate the borders:
@if $event--link-color != false and $event--link-has-border-bottom != false {
    $event--link-border-bottom: 1px solid lighten($event--link-color, 20%) !default;
    $event--link-border-bottom--alt: 2px solid lighten($event--link-color--alt, 30%) !default;
}
*/
/*
$event-button--text-color: #fff !default;
$event-button--background-color: $event--base-color !default;
$event-button--background-color-alt: lighten($event--base-color, 20%) !default;
$event-button--border-color: darken($event--base-color, 20%) !default;
*/
/*
    IE11 needs this wrapper to behave properly.
    If you're not supporting IE11, you don't this this CSS or the HTML that goes with it.
*/
.c-event-wrap {
  display: -ms-flexbox;
  display: flex;
  height: 100%;
}

.c-event-wrap > .c-event {
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
}

_:-ms-lang(x), .c-event.c-event {
  padding-left: 0\9;
  padding-right: 0\9;
}

_:-ms-lang(x), .c-event.c-event > * {
  margin-left: 2.4rem\9;
  margin-right: 2.4rem\9;
}

_:-ms-lang(x), .c-event.c-event .c-event__action {
  margin-right: 2.4rem\9;
}

/*
    Note featurettes should only appear in the main body and fill the width, so media queries are
    ok here - we don't need to worry about other contexts and container-queries.
*/
/*
$featurette-cta--border-width: 1px !default;
$featurette-cta--border-style: solid !default;
$featurette-cta--border-radius: 3px !default;
*/
/*
$featurette--link-color: false !default;
$featurette--link-color--alt: false !default;
$featurette--link-has-border-bottom: false !default;
$featurette--link-border-bottom: false !default;
$featurette--link-border-bottom--alt: false !default;

// If we've specified a link color for the featurette, but not an alt state (e.g. hover)
// then generate one
@if $featurette--link-color != false and $featurette--link-color--alt == false {
    $featurette--link-color--alt: darken($featurette--link-color, 10%) !default;;
}

// If we've specified a link color for the featurette, and we want bottom borders, generate the borders:
@if $featurette--link-color != false and $featurette--link-has-border-bottom != false {
    $featurette--link-border-bottom: 1px solid lighten($featurette--link-color, 20%) !default;
    $featurette--link-border-bottom--alt: 2px solid lighten($featurette--link-color--alt, 30%) !default;
}
*/
/*
$featurette-button--text-color: #fff !default;
$featurette-button--background-color: $featurette--base-color !default;
$featurette-button--background-color-alt: lighten($featurette--base-color, 20%) !default;
$featurette-button--border-color: darken($featurette--base-color, 20%) !default;
*/
/*
    IE11 needs this wrapper to behave properly.
    If you're not supporting IE11, you don't this this CSS or the HTML that goes with it.
*/
.c-featurette-wrap {
  display: -ms-flexbox;
  display: flex;
  height: 100%;
}

.c-featurette-wrap > .c-featurette {
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
}

.c-featurette.t-featurette--dark,
.c-featurette.t-featurette--dark a {
  background-color: #2d2136;
  color: #fff;
}

/*


*/
/*$glimpse--link-color: false !default;
$glimpse--link-has-border-bottom: false !default;
$glimpse--link-color--alt: false !default;
$glimpse--link-has-border-bottom: false !default;
$glimpse--link-border-bottom: false !default;
$glimpse--link-border-bottom--hover: false !default;*/
/*
*/
/*
*/
/*
*/
/*
*/
/*
*/
/*
*/
/*
*/
/*
*/
/* ---------------------------------------------------------------------------------------------- */
/* --| Decoration Patterns |--------------------------------------------------------------------- */
/*
Note - this won't work until SASS supports dynamic calling of mixins. It's close, but hasn't been
merged yet. Hoping that will be done soon so I can change this.

// List all the includes that should be called.
// Note that they're defined in the relevent pattern files, so it isn't ideal to list them here,
// but I don't know of another way of doing this yet.
// One idea could be that each pattern that needs to be theme-able adds it's own name to this list,
// (registers itself). This may work, but may come with it's own set of problems. Investigate.
$patterns: (
    bands-theme,
    page-header-theme,
    panel-theme,
    panel-theme--dark,
    primary-cta-theme
);
*/
/* - Waiting for SASS to support. Currently pseudo code.
@each $pattern in $patterns {
    @include $pattern (
        (
            name  : frosttie,
            theme : $theme
        )
    );
}
*/
.d-background--very-light.t-frosttie {
  background-color: #e8eaf8 !important;
}

.d-background--light.t-frosttie {
  background-color: #8890d8 !important;
}

.d-background.t-frosttie {
  background-color: #2b3383 !important;
}

.d-background--dark.t-frosttie {
  background-color: #1e245d !important;
}

.d-background--very-dark.t-frosttie {
  background-color: #121536 !important;
}

.d-background--sloped.t-frosttie {
  background: -moz-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: -webkit-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
}

.d-bands.t-frosttie,
.d-bands--left.t-frosttie,
.d-bands--right.t-frosttie,
.d-bands--sides.t-frosttie,
.d-bands--top.t-frosttie,
.d-bands--above.t-frosttie,
.d-bands--bottom.t-frosttie,
.d-bands--below.t-frosttie {
  border-color: #2b3383 !important;
}

.c-card .c-card__full-link.t-frosttie,
.c-card .c-card__full-link.t-frosttie:hover {
  background: #222968;
}

.c-card.t-frosttie,
.c-card.t-frosttie .c-card__main {
  background-color: #222968;
}

.c-card.t-frosttie .c-card__main {
  color: #fff;
  background: #2b3383;
}

.c-card.t-frosttie {
  border-color: #121536;
}

.c-featurette.t-frosttie,
.c-featurette.t-frosttie a {
  background-color: #2b3383;
  color: #fff;
}

/*.c-page-header.t-frosttie {
		color: map-get($theme, text-color);
		background-color: map-get($theme, page-header-color);
	}*/
.c-panel.c-panel.t-frosttie {
  color: #333;
  background: #2b3383;
}

.c-panel.c-panel.t-frosttie a[href] {
  color: #333;
}

.c-panel.c-panel.t-frosttie a[href]:hover,
.c-panel.c-panel.t-frosttie a[href]:active,
.c-panel.c-panel.t-frosttie a[href]:focus {
  color: #333;
}

.c-panel.c-panel.t-frosttie a[href].cta {
  border-color: #333;
  color: #333;
  background-color: transparent;
}

.c-panel.c-panel.t-frosttie a[href].cta:hover,
.c-panel.c-panel.t-frosttie a[href].cta:active,
.c-panel.c-panel.t-frosttie a[href].cta:focus {
  background-color: rgba(255, 255, 255, 0.1);
}

.c-primary-cta.t-frosttie[href] {
  color: #ffffff;
  background-color: #613392;
}

.c-primary-cta.t-frosttie[href]:hover, .c-primary-cta.t-frosttie[href]:active, .c-primary-cta.t-frosttie[href]:focus {
  color: #ffffff;
  /*@if is-int($f__button-background-color--alt) {
                @if $f__button-background-color--alt > 0 {
                    $f__button-background-color--alt_percent: $f__button-background-color--alt * 1%;
                    background-color: lighten(map-get($theme, cta-background-color), $f__button-background-color--alt_percent);
                }
                @if $f__button-background-color--alt < 0 {
                    $f__button-background-color--alt_percent: $f__button-background-color--alt * -1%;
                    background-color: darken(map-get($theme, cta-background-color), $f__button-background-color--alt_percent);
                }
            }
            */
  background-color: #48266c;
}

.c-sign.t-frosttie {
  background: -moz-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: -webkit-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
}

/*.t-frosttie.t-color {
    color: map-get($theme, text-color);
}*/
/*
.t-frosttie button,
.t-frosttie button.over-panel-control,
.t-frosttie button.over-panel-control[aria-expanded=true] {*
.t-frosttie button:not(.over-panel__overlay):not(.dropdown__button),
.t-frosttie button:not(.over-panel__overlay)[aria-expanded=true] {
*/
button.t-frosttie:not(.over-panel__overlay):not(.dropdown__button) {
  border-color: #2b3383 !important;
  color: #ffffff !important;
  background-color: #2b3383 !important;
}

button.t-frosttie:not(.over-panel__overlay):not(.dropdown__button):hover, button.t-frosttie:not(.over-panel__overlay):not(.dropdown__button):active, button.t-frosttie:not(.over-panel__overlay):not(.dropdown__button):focus {
  background-color: #1e245d !important;
}

table.t-frosttie caption,
.t-frosttie + .highcharts-data-table caption {
  background-color: #2b3383;
}

table.t-frosttie th,
.t-frosttie + .highcharts-data-table th {
  background-color: white;
}

table.t-frosttie td,
.t-frosttie + .highcharts-data-table td,
table.t-frosttie th,
.t-frosttie + .highcharts-data-table th {
  border: 1px solid #2b3383;
}

table.t-frosttie tr:nth-child(odd) > td,
.t-frosttie + .highcharts-data-table tr:nth-child(odd) > td,
table.t-frosttie tr:nth-child(odd) > th,
.t-frosttie + .highcharts-data-table tr:nth-child(odd) > th {
  background-color: #fcfcfe;
}

.t-frosttie.nav-bar {
  background: -moz-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: -webkit-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
}

.t-frosttie.subnav__items {
  background-color: #2b3383;
}

.t-frosttie.over-panel__contents {
  background: -moz-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: -webkit-linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
  background: linear-gradient(45deg, #252c70 0%, #262d74 50%, #28307b 50%, #272f77 100%) !important;
}

/*
.t-frosttie.search-form {
    background-color: map-get($theme, background-color);
}
*/
.t-frosttie.search-form .search-form__submit {
  background-color: #252c70;
  /*&:hover,
    &:active,
    &:focus {
        @if is-int($f__button-background-color--alt) {
            @if $f__button-background-color--alt > 0 {
                $f__button-background-color--alt_percent: $f__button-background-color--alt * 1%;
                background-color: lighten(map-get($theme, background-color), $f__button-background-color--alt_percent);
            }
            @if $f__button-background-color--alt < 0 {
                $f__button-background-color--alt_percent: $f__button-background-color--alt * -1%;
                background-color: darken(map-get($theme, background-color), $f__button-background-color--alt_percent);
            }
        }
    }*/
}

.t-frosttie.search-form .search-form__submit:hover, .t-frosttie.search-form .search-form__submit:focus {
  background-color: #181d49;
}

/* - Don't do this, it's too generic and results in equal specifivity that's resolved in source
    order, thus later themes win out, causing problems.
.t-frosttie a[href] {

    border-color: map-get($theme, border-color);
    color: map-get($theme, text-color);
    background-color: map-get($theme, background-color);

    &:hover,
    &:active,
    &:focus {
        color: map-get($theme, text-color);
    }
}
*/
/*
:not(.overpanel) .t-frosttie a[href].cta {

    border-color: map-get($theme, border-color);
    color: map-get($theme, text-color);
    background-color: transparent;
    //background-color: map-get($theme, background-color);
    content: "frosttie";

    &:hover,
    &:active,
    &:focus {
        @if color_light_or_dark(map-get($theme, background-color)) == 'light' {
            background-color: rgba(0,0,0,0.2);
        } @else {
            background-color: rgba(255,255,255,0.2);
        }


        //background-color: lighten(map-get($theme, border-color), 65%);
    }
}
*/
/*
.t-frosttie.d-50-50-background {
    background: #FFFFFF;
    background: -moz-linear-gradient(left, map-get($theme, background-color) 0%, map-get($theme, background-color) 50%, #ffffff 50%, #ffffff 100%);
    background: -webkit-linear-gradient(left, map-get($theme, background-color) 0%,map-get($theme, background-color) 50%,#ffffff 50%,#ffffff 100%);
    background: linear-gradient(to right, map-get($theme, background-color) 0%,map-get($theme, background-color) 50%,#ffffff 50%,#ffffff 100%);
}

.t-frosttie.d-50-50-background--flipped {
    background: #FFFFFF;
    background: -moz-linear-gradient(left, #ffffff 0%, #ffffff 50%, map-get($theme, background-color) 50%, map-get($theme, background-color) 100%);
    background: -webkit-linear-gradient(left, #ffffff 0%,#ffffff 50%,map-get($theme, background-color) 50%,map-get($theme, background-color) 100%);
    background: linear-gradient(to right, #ffffff 0%,#ffffff 50%,map-get($theme, background-color) 50%,map-get($theme, background-color) 100%);
}
*/
.d-background--very-light.t-frosttie--alt {
  background-color: #fbfafd !important;
}

.d-background--light.t-frosttie--alt {
  background-color: #bb9bdc !important;
}

.d-background.t-frosttie--alt {
  background-color: #613392 !important;
}

.d-background--dark.t-frosttie--alt {
  background-color: #48266c !important;
}

.d-background--very-dark.t-frosttie--alt {
  background-color: #2f1946 !important;
}

.d-background--sloped.t-frosttie--alt {
  background: -moz-linear-gradient(45deg, #542c7f 0%, #572e83 50%, #5c308a 50%, #592f87 100%) !important;
  background: -webkit-linear-gradient(45deg, #542c7f 0%, #572e83 50%, #5c308a 50%, #592f87 100%) !important;
  background: linear-gradient(45deg, #542c7f 0%, #572e83 50%, #5c308a 50%, #592f87 100%) !important;
}

.c-sign.t-frosttie--alt {
  background: -moz-linear-gradient(45deg, #542c7f 0%, #572e83 50%, #5c308a 50%, #592f87 100%) !important;
  background: -webkit-linear-gradient(45deg, #542c7f 0%, #572e83 50%, #5c308a 50%, #592f87 100%) !important;
  background: linear-gradient(45deg, #542c7f 0%, #572e83 50%, #5c308a 50%, #592f87 100%) !important;
}

.c-panel.c-panel--very-light.t-frosttie {
  color: #333;
  background: #afb4e5;
}

.c-panel.c-panel--very-light.t-frosttie a[href] {
  color: #333;
}

.c-panel.c-panel--very-light.t-frosttie a[href]:hover,
.c-panel.c-panel--very-light.t-frosttie a[href]:active,
.c-panel.c-panel--very-light.t-frosttie a[href]:focus {
  color: #333;
}

.c-panel.c-panel--very-light.t-frosttie a[href].cta {
  border-color: #333;
  color: #333;
  background-color: transparent;
}

.c-panel.c-panel--very-light.t-frosttie a[href].cta:hover,
.c-panel.c-panel--very-light.t-frosttie a[href].cta:active,
.c-panel.c-panel--very-light.t-frosttie a[href].cta:focus {
  background-color: rgba(255, 255, 255, 0.1);
}

.c-panel.c-panel--light.t-frosttie {
  color: #333;
  background: #8890d8;
}

.c-panel.c-panel--light.t-frosttie a[href] {
  color: #333;
}

.c-panel.c-panel--light.t-frosttie a[href]:hover,
.c-panel.c-panel--light.t-frosttie a[href]:active,
.c-panel.c-panel--light.t-frosttie a[href]:focus {
  color: #333;
}

.c-panel.c-panel--light.t-frosttie a[href].cta {
  border-color: #333;
  color: #333;
  background-color: transparent;
}

.c-panel.c-panel--light.t-frosttie a[href].cta:hover,
.c-panel.c-panel--light.t-frosttie a[href].cta:active,
.c-panel.c-panel--light.t-frosttie a[href].cta:focus {
  background-color: rgba(255, 255, 255, 0.1);
}

.c-panel.c-panel--dark.t-frosttie {
  color: #fff;
  background: #1e245d;
}

.c-panel.c-panel--dark.t-frosttie a[href] {
  color: #fff;
}

.c-panel.c-panel--dark.t-frosttie a[href]:hover,
.c-panel.c-panel--dark.t-frosttie a[href]:active,
.c-panel.c-panel--dark.t-frosttie a[href]:focus {
  color: #fff;
}

.c-panel.c-panel--dark.t-frosttie a[href].cta {
  border-color: #fff;
  color: #fff;
  background-color: transparent;
}

.c-panel.c-panel--dark.t-frosttie a[href].cta:hover,
.c-panel.c-panel--dark.t-frosttie a[href].cta:active,
.c-panel.c-panel--dark.t-frosttie a[href].cta:focus {
  background-color: rgba(255, 255, 255, 0.1);
}

.c-panel.c-panel--very-dark.t-frosttie {
  color: #fff;
  background: #121536;
}

.c-panel.c-panel--very-dark.t-frosttie a[href] {
  color: #fff;
}

.c-panel.c-panel--very-dark.t-frosttie a[href]:hover,
.c-panel.c-panel--very-dark.t-frosttie a[href]:active,
.c-panel.c-panel--very-dark.t-frosttie a[href]:focus {
  color: #fff;
}

.c-panel.c-panel--very-dark.t-frosttie a[href].cta {
  border-color: #fff;
  color: #fff;
  background-color: transparent;
}

.c-panel.c-panel--very-dark.t-frosttie a[href].cta:hover,
.c-panel.c-panel--very-dark.t-frosttie a[href].cta:active,
.c-panel.c-panel--very-dark.t-frosttie a[href].cta:focus {
  background-color: rgba(255, 255, 255, 0.1);
}

/* ---------------------------------------------------------------------------------------------- */
