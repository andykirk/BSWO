// This file acts as a bridge or converter between the theme values and the speecifc patterns.
// Note that all patterns that need to be themeable need to follow the same 'interface'.
// See 'panel' pattern for initial example.

// NOTE: the way this works is that patterns are only themed if the theme class is applied to the
// same element as the pattern class. This is intentional as it's possible for a collection of
// things to need to utilize several themes (think of news items belonging to different projects)
// The only things that are (and should be) scoped to children of themed classes via the cascade
// rather than explicitly are the overrides to StartCSS, at the bottom.

$theme-namespace: t- !default;

/*
Note - this won't work until SASS supports dynamic calling of mixins. It's close, but hasn't been
merged yet. Hoping that will be done soon so I can change this.

// List all the includes that should be called.
// Note that they're defined in the relevent pattern files, so it isn't ideal to list them here,
// but I don't know of another way of doing this yet.
// One idea could be that each pattern that needs to be theme-able adds it's own name to this list,
// (registers itself). This may work, but may come with it's own set of problems. Investigate.
$patterns: (
    bands-theme,
    page-header-theme,
    panel-theme,
    panel-theme--dark,
    primary-cta-theme
);
*/


// Set defaults:
$theme: map-merge(
    (
        background-color           : map-get($theme, primary-color),
        band-color                 : map-get($theme, primary-color),
        border-color               : map-get($theme, primary-color),
        card-background-color      : darken(map-get($theme, primary-color), 7%),
        card-main-background-color : map-get($theme, primary-color),
        card-border-color          : darken(map-get($theme, primary-color), 20%),
        card-text-color            : #fff,
        cta-text-color             : #333,
        cta-background-color       : map-get($theme, primary-color),
        page-header-color          : map-get($theme, primary-color),
        signs-background-color     : map-get($theme, primary-color),
        text-color                 : #333
    )
    , $theme
);





/* - Waiting for SASS to support. Currently pseudo code.
@each $pattern in $patterns {
    @include $pattern (
        (
            name  : #{$theme-name},
            theme : $theme
        )
    );
}
*/
//@debug $theme;

@include background-theme($theme-name, $theme);
@include bands-theme($theme-name, $theme);
@include card-theme($theme-name, $theme);
@include featurette-theme($theme-name, $theme);
//@include meter-theme($theme-name, $theme);
@include page-header-theme($theme-name, $theme);
@include panel-theme($theme-name, $theme);
@include primary-cta-theme($theme-name, $theme);
@include signs-theme($theme-name, $theme);

// Override StartCSS values.
// Note this almost certainly isn't the best place for this but will do for now.
/*.#{$theme-namespace}#{$theme-name}.t-color {
    color: map-get($theme, text-color);
}*/


/*
.#{$theme-namespace}#{$theme-name} button,
.#{$theme-namespace}#{$theme-name} button.over-panel-control,
.#{$theme-namespace}#{$theme-name} button.over-panel-control[aria-expanded=true] {*
.#{$theme-namespace}#{$theme-name} button:not(.over-panel__overlay):not(.dropdown__button),
.#{$theme-namespace}#{$theme-name} button:not(.over-panel__overlay)[aria-expanded=true] {
*/
button.#{$theme-namespace}#{$theme-name}:not(.over-panel__overlay):not(.dropdown__button) {
    border-color: map-get($theme, border-color) !important;
    color: map-get($theme, cta-text-color) !important;
    background-color: map-get($theme, background-color) !important;

    &:hover,
    &:active,
    &:focus {
        @if is-int($f__button-background-color--alt) {
            @if $f__button-background-color--alt > 0 {
                $f__button-background-color--alt_percent: $f__button-background-color--alt * 1%;
                background-color: lighten(map-get($theme, background-color), $f__button-background-color--alt_percent) !important;
            }
            @if $f__button-background-color--alt < 0 {
                $f__button-background-color--alt_percent: $f__button-background-color--alt * -1%;
                background-color: darken(map-get($theme, background-color), $f__button-background-color--alt_percent) !important;
            }
        }
    }
}


// Table:

table.#{$theme-namespace}#{$theme-name} caption,
.#{$theme-namespace}#{$theme-name} + .highcharts-data-table caption {
    background-color: map-get($theme, background-color);
}

table.#{$theme-namespace}#{$theme-name} th,
.#{$theme-namespace}#{$theme-name} + .highcharts-data-table th {
    background-color: lighten(map-get($theme, background-color), 69);
}

table.#{$theme-namespace}#{$theme-name} td,
.#{$theme-namespace}#{$theme-name} + .highcharts-data-table td,
table.#{$theme-namespace}#{$theme-name} th,
.#{$theme-namespace}#{$theme-name} + .highcharts-data-table th {
    border: 1px solid map-get($theme, background-color);
}


table.#{$theme-namespace}#{$theme-name} tr:nth-child(odd) > td,
.#{$theme-namespace}#{$theme-name} + .highcharts-data-table tr:nth-child(odd) > td,
table.#{$theme-namespace}#{$theme-name} tr:nth-child(odd) > th,
.#{$theme-namespace}#{$theme-name} + .highcharts-data-table tr:nth-child(odd) > th {
    background-color: lighten(map-get($theme, background-color), 65);
}


// Navbar:
.#{$theme-namespace}#{$theme-name}.nav-bar {
    @include sloped-background(map-get($theme, primary-color));
}

.#{$theme-namespace}#{$theme-name}.subnav__items {
    background-color: map-get($theme, background-color);
}  



// Overpanel:
.#{$theme-namespace}#{$theme-name}.over-panel__contents {
    @include sloped-background(map-get($theme, primary-color));
}



// Search form
/*
.#{$theme-namespace}#{$theme-name}.search-form {
    background-color: map-get($theme, background-color);
}
*/


// Search form button:
.#{$theme-namespace}#{$theme-name}.search-form .search-form__submit {
    background-color: darken(map-get($theme, background-color), 5%);
    
    &:hover,
    &:focus {
        background-color: darken(map-get($theme, background-color), 15%);
    }

    /*&:hover,
    &:active,
    &:focus {
        @if is-int($f__button-background-color--alt) {
            @if $f__button-background-color--alt > 0 {
                $f__button-background-color--alt_percent: $f__button-background-color--alt * 1%;
                background-color: lighten(map-get($theme, background-color), $f__button-background-color--alt_percent);
            }
            @if $f__button-background-color--alt < 0 {
                $f__button-background-color--alt_percent: $f__button-background-color--alt * -1%;
                background-color: darken(map-get($theme, background-color), $f__button-background-color--alt_percent);
            }
        }
    }*/
}



/* - Don't do this, it's too generic and results in equal specifivity that's resolved in source
    order, thus later themes win out, causing problems.
.#{$theme-namespace}#{$theme-name} a[href] {

    border-color: map-get($theme, border-color);
    color: map-get($theme, text-color);
    background-color: map-get($theme, background-color);

    &:hover,
    &:active,
    &:focus {
        color: map-get($theme, text-color);
    }
}
*/
/*
:not(.overpanel) .#{$theme-namespace}#{$theme-name} a[href].cta {

    border-color: map-get($theme, border-color);
    color: map-get($theme, text-color);
    background-color: transparent;
    //background-color: map-get($theme, background-color);
    content: "#{$theme-name}";

    &:hover,
    &:active,
    &:focus {
        @if color_light_or_dark(map-get($theme, background-color)) == 'light' {
            background-color: rgba(0,0,0,0.2);
        } @else {
            background-color: rgba(255,255,255,0.2);
        }


        //background-color: lighten(map-get($theme, border-color), 65%);
    }
}
*/
/*
.#{$theme-namespace}#{$theme-name}.d-50-50-background {
    background: #FFFFFF;
    background: -moz-linear-gradient(left, map-get($theme, background-color) 0%, map-get($theme, background-color) 50%, #ffffff 50%, #ffffff 100%);
    background: -webkit-linear-gradient(left, map-get($theme, background-color) 0%,map-get($theme, background-color) 50%,#ffffff 50%,#ffffff 100%);
    background: linear-gradient(to right, map-get($theme, background-color) 0%,map-get($theme, background-color) 50%,#ffffff 50%,#ffffff 100%);
}

.#{$theme-namespace}#{$theme-name}.d-50-50-background--flipped {
    background: #FFFFFF;
    background: -moz-linear-gradient(left, #ffffff 0%, #ffffff 50%, map-get($theme, background-color) 50%, map-get($theme, background-color) 100%);
    background: -webkit-linear-gradient(left, #ffffff 0%,#ffffff 50%,map-get($theme, background-color) 50%,map-get($theme, background-color) 100%);
    background: linear-gradient(to right, #ffffff 0%,#ffffff 50%,map-get($theme, background-color) 50%,map-get($theme, background-color) 100%);
}
*/


// Alternate colours:
@if map-has-key($theme, "secondary-color") {
    //@debug map-get($theme, secondary-color);
    $theme: map-merge(
        $theme,
        (
            background-color       : map-get($theme, secondary-color),
            signs-background-color : map-get($theme, secondary-color)
        )
    );

    @include background-theme(#{$theme-name}--alt, $theme);
    @include signs-theme(#{$theme-name}--alt, $theme);
}


// Very light theme:

$theme: map-merge(
    $theme,
    (
        background-color      : lighten(map-get($theme, primary-color), 45%),
        cta-text-color        : #333,
        cta-background-color  : lighten(map-get($theme, primary-color), 45%),
        text-color            : #333
    )
);

@include panel-theme($theme-name, $theme, --very-light);


// Light theme:

$theme: map-merge(
    $theme,
    (
        background-color      : lighten(map-get($theme, primary-color), 35%),
        cta-text-color        : #333,
        cta-background-color  : lighten(map-get($theme, primary-color), 35%),
        text-color            : #333
    )
);

@include panel-theme($theme-name, $theme, --light);


// Dark theme:

$theme: map-merge(
    $theme,
    (
        background-color      : darken(map-get($theme, primary-color), 10%),
        cta-text-color        : #fff,
        cta-background-color  : darken(map-get($theme, primary-color), 10%),
        text-color            : #fff
    )
);

@include panel-theme($theme-name, $theme, --dark);


// Very dark theme:
$theme: map-merge(
    $theme,
    (
        background-color      : darken(map-get($theme, primary-color), 20%),
        cta-text-color        : #fff,
        cta-background-color  : darken(map-get($theme, primary-color), 20%),
        text-color            : #fff
    )
);

@include panel-theme($theme-name, $theme, --very-dark);

